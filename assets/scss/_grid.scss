/*=Grid
-----------------------------------------------------------*/

// Percentage based grids with fixed gutter width
$grid-column-12: 12;
$grid-column-16: 16;
$grid-gutter:    30px;
$max-width:      1020px;

// Mixins
// ----------------------------------------------
@mixin col-base {
    position: relative;
    display: block;
    float: left;
    padding-right: $grid-gutter;
}

@mixin col($n, $cols: $grid-column-16) {
    @include col-base();
    width: percentage($n / $cols);
}

@mixin col-100() {
    float: none;
    width: 100%;
}

// for full width element not wrapped in a col
@mixin pull-left {
    margin-left: -$column;
    padding-left: $column;
}

// Grid Setup
// ----------------------------------------------
.container-grid {
    margin: 0 auto;
    padding-left: $grid-gutter;
    max-width: $max-width;
    width: 100%;
}

.grid-row {
    @include clearfix();
}

.col {
    @include col-base();
}

.col-100 {
    @extend .col;
    @include col-100();
}

@for $n from 1 through $grid-column-12 {
    .col-#{$n}-#{$grid-column-12} {
        @extend .col;
        width: percentage($n / $grid-column-12);
    }
}

@for $n from 1 through $grid-column-16 {
    .col-#{$n}-#{$grid-column-16} {
        @extend .col;
        width: percentage($n / $grid-column-16);
    }
}

// fractions in lowest terms - makes more sense when nesting
.col-1-2 {
    @extend .col;
    @extend .col-8-16;
}

.col-1-3 {
    @extend .col;
    @extend .col-4-12;
}

.col-2-3 {
    @extend .col;
    @extend .col-8-12;
}

.col-1-4 {
    @extend .col;
    @extend .col-4-16;
}

.col-3-4 {
    @extend .col;
    @extend .col-12-16;
}

.col-right {
    float: right;
}

.grid-nested {
    padding-right: 0;
}

// Set all columns to 100% 767px and below
@media (max-width : 767px) {
    [class*='col-']  {
        @include col-100();
    }
}
